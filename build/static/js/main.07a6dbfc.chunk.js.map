{"version":3,"sources":["Input_Box.js","Button1.js","App.js","serviceWorker.js","index.js"],"names":["App","className","style","alignItems","border","box","placeholder","props","type","Header","Layout","Content","Footer","display","justiftContent","height","variant","fontSize","color","fontWeight","marginLeft","marginRight","background","justifyContent","alignSelf","marginTop","Input_Box","Button1","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAUiBA,EANL,kBACR,yBAAKC,UAAU,OACZ,kBAAC,IAAD,CAAOC,MAAO,CAACC,WAAW,SAAUC,OAAQ,MAAOC,IAAK,OAAQC,YAAY,gB,QCKpEN,EANH,SAACO,GAAD,OACV,yBAAKN,UAAU,OACb,kBAAC,IAAD,CAAQO,KAAK,WAAb,a,kBCGIC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAiCVZ,MA/Bf,WACE,OACE,yBAAKC,UAAU,OAEf,kBAAC,IAAD,KACO,kBAACQ,EAAD,KACE,yBAAKP,MAAO,CAACW,QAAS,OAASC,eAAe,SAAUC,OAAQ,SACrD,kBAAC,IAAD,CAAYC,QAAU,KAAKd,MAAO,CAAEe,SAAS,OAAQC,MAAM,QAAQC,WAAW,OAAQC,WAAY,OAAOC,YAAa,OAAOP,eAAe,SAA5I,oBAMb,kBAACH,EAAD,CAAST,MAAO,CAACoB,WAAY,UAAYP,OAAQ,QAASZ,WAAW,WACnE,yBAAKD,MAAO,CAAEW,QAAS,OAAQU,eAAgB,SAAUC,UAAW,SAAUC,UAAW,QACvF,kBAACC,EAAD,OAEA,yBAAKxB,MAAO,CAACuB,UAAW,QACxB,kBAACE,EAAD,QAMJ,kBAACf,EAAD,sCCxBSgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACT,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.07a6dbfc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Input } from 'antd';\r\n\r\n\r\nconst App = () => (\r\n    <div className=\"App\">\r\n       <Input style={{alignItems:'center', border: '1px', box: '1px'}} placeholder=\" Username\" />\r\n    </div>\r\n  );\r\n  \r\n  export default App;","import React from 'react';\r\nimport { Button } from 'antd';\r\n\r\n\r\n\r\nconst App = (props) => (\r\n  <div className=\"App\">\r\n    <Button type=\"primary\" >Compare</Button>\r\n  </div>\r\n);\r\n\r\nexport default App;","import React from 'react';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport Input_Box from './Input_Box';\nimport Button1 from './Button1';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { Typography, Space } from 'antd';\n\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    \n    <Layout>\n           <Header>\n             <div style={{display: \"flex\" , justiftContent:\"centre\", height: \"30px\"}}>\n                        <Typography variant = \"h1\" style={{ fontSize:\"30px\" ,color:\"white\",fontWeight:'bold', marginLeft: \"auto\",marginRight: \"auto\",justiftContent:\"left\"}}>\n                        Github Compare\n                        </Typography>\n             \n             </div>\n           </Header>\n           <Content style={{background: '#a0c4c1' , height: \"480px\", alignItems:'center'}}>\n             <div style={{ display: 'flex', justifyContent: 'center', alignSelf: 'center', marginTop: '15%' }}>\n               <Input_Box/>\n               </div>\n               <div style={{marginTop: '5px'}}>\n               <Button1/>\n               \n\n               </div>\n               \n           </Content>\n           <Footer >Designed by Prateek Tiwary</Footer>\n     </Layout>\n     \n   </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n<App />, \r\ndocument.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}